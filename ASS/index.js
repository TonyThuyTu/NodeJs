const express = require('express');
const { engine } = require('express-handlebars');
const path = require('path');
const fs = require("fs");
const multer = require("multer");
const cookieParser = require("cookie-parser");
const methodOverride = require('method-override');
const authMiddleware = require("./src/app/middleware/authMiddleware");

const app = express();
const port = 3000;
require('dotenv').config();

// üìå T·∫°o th∆∞ m·ª•c `public/img/` n·∫øu ch∆∞a c√≥
const uploadDir = path.join(__dirname, "public", "img");
if (!fs.existsSync(uploadDir)) {
    fs.mkdirSync(uploadDir, { recursive: true });
}

// üìå C·∫•u h√¨nh Multer ƒë·ªÉ upload ·∫£nh v√†o th∆∞ m·ª•c `public/img/`
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, "public/img/");
    },
    filename: function (req, file, cb) {
        const uniqueSuffix = Date.now() + path.extname(file.originalname);
        cb(null, uniqueSuffix);
    }
});

const upload = multer({ storage: storage });

// üìå Import k·∫øt n·ªëi MongoDB
const { connectDB } = require("./src/config/data");

// üìå C·∫•u h√¨nh template engine Handlebars
app.engine('hbs', engine({
  extname: '.hbs',
  runtimeOptions: {
    allowProtoPropertiesByDefault: true,
    allowProtoMethodsByDefault: true
  }
}));
app.set('view engine', 'hbs');

// üìå Ch·ªâ ƒë·ªãnh ƒë∆∞·ªùng d·∫´n t·ªõi views
app.set('views', path.join(__dirname, 'src', 'resources', 'views'));

// üìå Middleware
app.use(express.urlencoded({ extended: true }));
app.use(express.json());
app.use(methodOverride('_method'));
app.use(cookieParser());
app.use(authMiddleware); // D√πng middleware tr∆∞·ªõc khi render views

// üìå Ph·ª•c v·ª• file tƒ©nh (public)
app.use(express.static(path.join(__dirname, 'public')));

// üìå Import routes
const route = require('./src/routes/index.route'); 
route(app);

// üìå API Upload ·∫£nh
app.post('/upload', upload.single('image'), (req, res) => {
    if (!req.file) {
        return res.status(400).json({ message: "Vui l√≤ng ch·ªçn ·∫£nh" });
    }
    res.json({ imageUrl: `/img/${req.file.filename}` });
});

// üìå Ch·∫°y server sau khi k·∫øt n·ªëi DB th√†nh c√¥ng
const startServer = async () => {
  try {
    await connectDB();
    app.listen(port, () => {
      console.log(`‚úÖ Server running at http://localhost:${port}`);
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi k·∫øt n·ªëi MongoDB, server kh√¥ng th·ªÉ kh·ªüi ƒë·ªông:", error);
  }
};

startServer();
