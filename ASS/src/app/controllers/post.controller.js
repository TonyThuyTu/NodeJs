const Post = require("../models/post");
const { ObjectId } = require("mongodb");

// ‚úÖ L·∫•y danh s√°ch b√†i vi·∫øt
const getAllPosts = async (req, res) => {
    try {
        console.log("üì• ƒêang l·∫•y danh s√°ch b√†i vi·∫øt...");
        const posts = await Post.find().sort({ createdAt: -1 });
        console.log("‚úÖ Danh s√°ch b√†i vi·∫øt:", posts);
        res.render("profile", { posts, title: "Trang Ch·ªß" });
    } catch (error) {
        console.error("üö® L·ªói khi l·∫•y danh s√°ch b√†i vi·∫øt:", error);
        res.status(500).send("L·ªói khi l·∫•y danh s√°ch b√†i vi·∫øt");
    }
};

// ‚úÖ Th√™m b√†i vi·∫øt m·ªõi (ch·ªâ ·∫£nh & ti√™u ƒë·ªÅ)
const createPost = async (req, res) => {
    try {
        console.log("üìù D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", req.body);
        console.log("üë§ Ng∆∞·ªùi ƒëƒÉng b√†i:", req.user);

        if (!req.body.title) {
            console.log("‚ö†Ô∏è Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
            return res.status(400).json({ message: "Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });
        }

        const imagePath = req.file ? "/img/" + req.file.filename : null;
        console.log("üì∏ ƒê∆∞·ªùng d·∫´n ·∫£nh:", imagePath);

        const newPost = new Post({
            title: req.body.title,
            image: imagePath,
            userId: req.user._id,
            createdAt: new Date()
        });

        await newPost.save();
        console.log("‚úÖ B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c l∆∞u:", newPost);
        res.redirect("/profile");
    } catch (error) {
        console.error("üö® L·ªói khi th√™m b√†i vi·∫øt:", error);
        res.status(500).json({ message: "L·ªói server" });
    }
};

// ‚úÖ L·∫•y b√†i vi·∫øt theo ID
const getPostById = async (req, res) => {
    try {
        console.log("üîç ƒêang t√¨m b√†i vi·∫øt v·ªõi ID:", req.params.id);
        const post = await Post.findById(req.params.id);
        if (!post) {
            console.log("‚ùå Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt!");
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt" });
        }
        console.log("‚úÖ T√¨m th·∫•y b√†i vi·∫øt:", post);
        res.render("postDetail", { title: post.title, post });
    } catch (error) {
        console.error("üö® L·ªói khi l·∫•y b√†i vi·∫øt:", error);
        res.status(500).json({ message: error.message });
    }
};

// ‚úÖ Hi·ªÉn th·ªã form ch·ªânh s·ª≠a b√†i vi·∫øt
const editPostForm = async (req, res) => {
    try {
        let { id } = req.params;
        console.log("‚úèÔ∏è Hi·ªÉn th·ªã form ch·ªânh s·ª≠a cho b√†i vi·∫øt ID:", id);

        if (!ObjectId.isValid(id)) {
            console.log("‚ö†Ô∏è ID kh√¥ng h·ª£p l·ªá!");
            return res.status(400).send("ID kh√¥ng h·ª£p l·ªá");
        }

        const post = await Post.findById(id);
        if (!post) {
            console.log("‚ùå B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i!");
            return res.status(404).send("B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i");
        }

        console.log("‚úÖ ƒê√£ t√¨m th·∫•y b√†i vi·∫øt ƒë·ªÉ ch·ªânh s·ª≠a:", post);
        res.render("editpost", { post, title: "Ch·ªânh s·ª≠a b√†i vi·∫øt" });
    } catch (error) {
        console.error("üö® L·ªói khi hi·ªÉn th·ªã form ch·ªânh s·ª≠a:", error);
        res.status(500).send("L·ªói server");
    }
};

// ‚úÖ C·∫≠p nh·∫≠t b√†i vi·∫øt
const updatePost = async (req, res) => {
    try {
        const { id } = req.params;
        const userId = req.user._id;

        console.log("üîç ID b√†i vi·∫øt:", id);
        console.log("üë§ ID ng∆∞·ªùi d√πng:", userId);
        console.log("üì© D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", req.body);
        console.log("üì∑ File upload:", req.file);

        if (!ObjectId.isValid(id)) {
            console.log("‚õî ID kh√¥ng h·ª£p l·ªá!");
            return res.status(400).send("ID kh√¥ng h·ª£p l·ªá");
        }

        const post = await Post.findById(id);
        if (!post) {
            console.log("‚ùå Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt!");
            return res.status(404).send("B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i");
        }

        if (post.userId.toString() !== userId.toString()) {
            console.log("‚õî Kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a b√†i vi·∫øt!");
            return res.status(403).send("B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a b√†i vi·∫øt n√†y!");
        }

        let updateData = { title: req.body.title || post.title };

        if (req.file) {
            updateData.image = "/img/" + req.file.filename;
            console.log("‚úÖ C·∫≠p nh·∫≠t ·∫£nh:", updateData.image);
        } else {
            updateData.image = post.image;
        }

        const updatedPost = await Post.findByIdAndUpdate(id, updateData, { new: true });

        console.log("‚úÖ B√†i vi·∫øt sau khi c·∫≠p nh·∫≠t:", updatedPost);

        res.redirect("/profile");
    } catch (error) {
        console.error("üö® L·ªói khi c·∫≠p nh·∫≠t b√†i vi·∫øt:", error);
        res.status(500).send("L·ªói server");
    }
};


// ‚úÖ X√≥a b√†i vi·∫øt
const deletePost = async (req, res) => {
    try {
        const { id } = req.params;
        const userId = req.user._id;

        console.log("üóëÔ∏è ƒêang x√≥a b√†i vi·∫øt ID:", id);

        if (!ObjectId.isValid(id)) {
            console.log("‚ö†Ô∏è ID kh√¥ng h·ª£p l·ªá!");
            return res.status(400).json({ message: "ID kh√¥ng h·ª£p l·ªá" });
        }

        const post = await Post.findOneAndDelete({ _id: id, userId });

        if (!post) {
            console.log("‚ùå B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a!");
            return res.status(404).json({ message: "B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a!" });
        }

        console.log("‚úÖ B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng:", post);
        res.json({ message: "X√≥a b√†i vi·∫øt th√†nh c√¥ng!" });
    } catch (error) {
        console.error("üö® L·ªói khi x√≥a b√†i vi·∫øt:", error);
        res.status(500).json({ message: "L·ªói server!" });
    }
};

module.exports = {
    getAllPosts,
    createPost,
    getPostById,
    updatePost,
    deletePost,
    editPostForm
};
